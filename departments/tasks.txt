
-- Задача 1
-- Найти всех сотрудников, подчиняющихся Ивану Иванову (с EmployeeID = 1), включая их подчиненных и подчиненных подчиненных. Для каждого сотрудника вывести следующую информацию:

/* 
EmployeeID: идентификатор сотрудника.
Имя сотрудника.
ManagerID: Идентификатор менеджера.
Название отдела, к которому он принадлежит.
Название роли, которую он занимает.
Название проектов, к которым он относится (если есть, конкатенированные в одном столбце через запятую).
Название задач, назначенных этому сотруднику (если есть, конкатенированные в одном столбце через запятую).
Если у сотрудника нет назначенных проектов или задач, отобразить NULL.
Требования:

Рекурсивно извлечь всех подчиненных сотрудников Ивана Иванова и их подчиненных.
Для каждого сотрудника отобразить информацию из всех таблиц.
Результаты должны быть отсортированы по имени сотрудника.
Решение задачи должно представлять из себя один sql-запрос и задействовать ключевое слово RECURSIVE.
*/

WITH RECURSIVE EmployeeHierarchy AS (
    -- Базовый случай: начинаем с Ивана Иванова (EmployeeID = 1)
    SELECT 
        EmployeeID, 
        Name, 
        ManagerID, 
        DepartmentID, 
        RoleID
    FROM 
        Employees
    WHERE 
        EmployeeID = 1
    
    UNION ALL
    
    -- Рекурсивный случай: находим всех подчиненных
    SELECT 
        e.EmployeeID, 
        e.Name, 
        e.ManagerID, 
        e.DepartmentID, 
        e.RoleID
    FROM 
        Employees e
    JOIN 
        EmployeeHierarchy eh ON e.ManagerID = eh.EmployeeID
)

SELECT 
    eh.EmployeeID,
    eh.Name AS 'Имя сотрудника',
    eh.ManagerID,
    d.DepartmentName AS 'Название отдела',
    r.RoleName AS 'Название роли',
    GROUP_CONCAT(DISTINCT p.ProjectName ORDER BY p.ProjectName SEPARATOR ', ') AS 'Проекты',
    GROUP_CONCAT(DISTINCT t.TaskName ORDER BY t.TaskName SEPARATOR ', ') AS 'Задачи'
FROM 
    EmployeeHierarchy eh
LEFT JOIN 
    Departments d ON eh.DepartmentID = d.DepartmentID
LEFT JOIN 
    Roles r ON eh.RoleID = r.RoleID
LEFT JOIN 
    Projects p ON d.DepartmentID = p.DepartmentID
LEFT JOIN 
    Tasks t ON eh.EmployeeID = t.AssignedTo
WHERE 
    eh.EmployeeID != 1  -- Исключаем самого Ивана Иванова
GROUP BY 
    eh.EmployeeID, eh.Name, eh.ManagerID, d.DepartmentName, r.RoleName
ORDER BY 
    eh.Name;



-- Задача 2
-- Найти всех сотрудников, подчиняющихся Ивану Иванову с EmployeeID = 1, включая их подчиненных и подчиненных подчиненных. Для каждого сотрудника вывести следующую информацию:

/* 
EmployeeID: идентификатор сотрудника.
Имя сотрудника.
Идентификатор менеджера.
Название отдела, к которому он принадлежит.
Название роли, которую он занимает.
Название проектов, к которым он относится (если есть, конкатенированные в одном столбце).
Название задач, назначенных этому сотруднику (если есть, конкатенированные в одном столбце).
Общее количество задач, назначенных этому сотруднику.
Общее количество подчиненных у каждого сотрудника (не включая подчиненных их подчиненных).
Если у сотрудника нет назначенных проектов или задач, отобразить NULL.
*/

WITH RECURSIVE EmployeeHierarchy AS (
    -- Базовый случай: начинаем с Ивана Иванова
    SELECT 
        EmployeeID, 
        Name, 
        ManagerID, 
        DepartmentID, 
        RoleID,
        0 AS Level  -- Добавляем уровень в иерархии
    FROM 
        Employees
    WHERE 
        EmployeeID = 1
    
    UNION ALL
    
    -- Рекурсивный случай: находим всех подчиненных с увеличением уровня
    SELECT 
        e.EmployeeID, 
        e.Name, 
        e.ManagerID, 
        e.DepartmentID, 
        e.RoleID,
        eh.Level + 1
    FROM 
        Employees e
    JOIN 
        EmployeeHierarchy eh ON e.ManagerID = eh.EmployeeID
),

-- Подсчет непосредственных подчиненных для каждого сотрудника
DirectSubordinates AS (
    SELECT 
        ManagerID,
        COUNT(*) AS SubordinateCount
    FROM 
        Employees
    WHERE 
        ManagerID IS NOT NULL
    GROUP BY 
        ManagerID
),

-- Список проектов для каждого сотрудника
EmployeeProjects AS (
    SELECT 
        e.EmployeeID,
        GROUP_CONCAT(DISTINCT p.ProjectName ORDER BY p.ProjectName SEPARATOR ', ') AS Projects
    FROM 
        Employees e
    JOIN 
        Departments d ON e.DepartmentID = d.DepartmentID
    JOIN 
        Projects p ON d.DepartmentID = p.DepartmentID
    GROUP BY 
        e.EmployeeID
),

-- Список задач и их количество для каждого сотрудника
EmployeeTasks AS (
    SELECT 
        AssignedTo AS EmployeeID,
        GROUP_CONCAT(DISTINCT TaskName ORDER BY TaskName SEPARATOR ', ') AS Tasks,
        COUNT(*) AS TaskCount
    FROM 
        Tasks
    GROUP BY 
        AssignedTo
)

-- Основной запрос с объединением всех данных
SELECT 
    eh.EmployeeID,
    eh.Name AS 'Имя сотрудника',
    eh.ManagerID,
    d.DepartmentName AS 'Название отдела',
    r.RoleName AS 'Название роли',
    ep.Projects AS 'Проекты',
    et.Tasks AS 'Задачи',
    IFNULL(et.TaskCount, 0) AS 'Количество задач',
    IFNULL(ds.SubordinateCount, 0) AS 'Количество подчиненных'
FROM 
    EmployeeHierarchy eh
LEFT JOIN 
    Departments d ON eh.DepartmentID = d.DepartmentID
LEFT JOIN 
    Roles r ON eh.RoleID = r.RoleID
LEFT JOIN 
    EmployeeProjects ep ON eh.EmployeeID = ep.EmployeeID
LEFT JOIN 
    EmployeeTasks et ON eh.EmployeeID = et.EmployeeID
LEFT JOIN 
    DirectSubordinates ds ON eh.EmployeeID = ds.ManagerID
WHERE 
    eh.EmployeeID != 1  -- Исключаем самого Ивана Иванова
ORDER BY 
    eh.Level, eh.Name;  -- Сортируем по уровню иерархии и имени


-- Задача 3
-- Найти всех сотрудников, которые занимают роль менеджера и имеют подчиненных (то есть число подчиненных больше 0). Для каждого такого сотрудника вывести следующую информацию:

/*
EmployeeID: идентификатор сотрудника.
Имя сотрудника.
Идентификатор менеджера.
Название отдела, к которому он принадлежит.
Название роли, которую он занимает.
Название проектов, к которым он относится (если есть, конкатенированные в одном столбце).
Название задач, назначенных этому сотруднику (если есть, конкатенированные в одном столбце).
Общее количество подчиненных у каждого сотрудника (включая их подчиненных).
Если у сотрудника нет назначенных проектов или задач, отобразить NULL.
*/

WITH RECURSIVE ManagersWithSubordinates AS (
    -- Находим всех менеджеров с подчиненными
    SELECT 
        e.EmployeeID,
        e.Name,
        e.ManagerID,
        e.DepartmentID,
        e.RoleID
    FROM Employees e
    JOIN Roles r ON e.RoleID = r.RoleID
    WHERE r.RoleName = 'Менеджер'
    AND EXISTS (
        SELECT 1 FROM Employees s 
        WHERE s.ManagerID = e.EmployeeID
    )
),

-- Рекурсивно находим всех подчиненных менеджеров (включая подчиненных подчиненных)
RecursiveSubordinates AS (
    -- Базовый случай: непосредственные подчиненные менеджеров
    SELECT 
        m.EmployeeID AS ManagerID,
        s.EmployeeID AS SubordinateID,
        1 AS Level
    FROM ManagersWithSubordinates m
    JOIN Employees s ON m.EmployeeID = s.ManagerID
    
    UNION ALL

    -- Рекурсивный случай: подчиненные подчиненных
    SELECT 
        rs.ManagerID,
        e.EmployeeID AS SubordinateID,
        rs.Level + 1
    FROM RecursiveSubordinates rs
    JOIN Employees e ON rs.SubordinateID = e.ManagerID
),

-- Подсчет общего количества подчиненных для каждого менеджера
SubordinateCounts AS (
    SELECT 
        ManagerID,
        COUNT(DISTINCT SubordinateID) AS TotalSubordinates
    FROM RecursiveSubordinates
    GROUP BY ManagerID
),

-- Список проектов для каждого менеджера
ManagerProjects AS (
    SELECT 
        m.EmployeeID,
        GROUP_CONCAT(DISTINCT p.ProjectName ORDER BY p.ProjectName SEPARATOR ', ') AS ProjectNames
    FROM ManagersWithSubordinates m
    LEFT JOIN Tasks t ON m.EmployeeID = t.AssignedTo
    LEFT JOIN Projects p ON t.ProjectID = p.ProjectID
    GROUP BY m.EmployeeID
),

-- Список задач для каждого менеджера
ManagerTasks AS (
    SELECT 
        m.EmployeeID,
        GROUP_CONCAT(DISTINCT t.TaskName ORDER BY t.TaskName SEPARATOR ', ') AS TaskNames
    FROM ManagersWithSubordinates m
    LEFT JOIN Tasks t ON m.EmployeeID = t.AssignedTo
    GROUP BY m.EmployeeID
)

-- Основной запрос с объединением всех данных
SELECT 
    m.EmployeeID,
    m.Name AS EmployeeName,
    m.ManagerID,
    d.DepartmentName,
    r.RoleName,
    mp.ProjectNames,
    mt.TaskNames,
    IFNULL(sc.TotalSubordinates, 0) AS TotalSubordinates
FROM ManagersWithSubordinates m
JOIN Departments d ON m.DepartmentID = d.DepartmentID
JOIN Roles r ON m.RoleID = r.RoleID
LEFT JOIN ManagerProjects mp ON m.EmployeeID = mp.EmployeeID
LEFT JOIN ManagerTasks mt ON m.EmployeeID = mt.EmployeeID
LEFT JOIN SubordinateCounts sc ON m.EmployeeID = sc.ManagerID
ORDER BY m.EmployeeID;
