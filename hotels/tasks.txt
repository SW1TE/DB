
-- Задача 1
-- Определить, какие клиенты сделали более двух бронирований в разных отелях, и вывести информацию о каждом таком клиенте, включая его имя, электронную почту, телефон, общее количество бронирований, а также список отелей, в которых они бронировали номера (объединенные в одно поле через запятую с помощью CONCAT). Также подсчитать среднюю длительность их пребывания (в днях) по всем бронированиям. Отсортировать результаты по количеству бронирований в порядке убывания.

WITH CustomerHotels AS (
    -- Собираем статистику по клиентам, отелям и бронированиям
    SELECT 
        c.ID_customer,
        c.name,
        c.email,
        c.phone,
        COUNT(DISTINCT b.ID_booking) AS total_bookings,  -- Общее количество бронирований
        COUNT(DISTINCT h.ID_hotel) AS distinct_hotels,    -- Количество уникальных отелей
        GROUP_CONCAT(DISTINCT h.name SEPARATOR ', ') AS hotel_names,  -- Список отелей через запятую
        AVG(DATEDIFF(b.check_out_date, b.check_in_date)) AS avg_stay_duration  -- Средняя продолжительность пребывания
    FROM 
        Customer c
    JOIN 
        Booking b ON c.ID_customer = b.ID_customer
    JOIN 
        Room r ON b.ID_room = r.ID_room
    JOIN 
        Hotel h ON r.ID_hotel = h.ID_hotel
    GROUP BY 
        c.ID_customer, c.name, c.email, c.phone
    HAVING 
        COUNT(DISTINCT h.ID_hotel) > 1  -- Фильтр: бронирования в более чем 1 отеле
)
-- Основной запрос с фильтрацией и сортировкой
SELECT 
    name,
    email,
    phone,
    total_bookings,
    hotel_names,
    ROUND(avg_stay_duration, 4) AS avg_stay_duration  -- Округление средней продолжительности
FROM 
    CustomerHotels
WHERE 
    total_bookings > 2  -- Только клиенты с более чем 2 бронированиями
ORDER BY 
    total_bookings DESC;  -- Сортировка по количеству бронирований



-- Задача 2
-- Необходимо провести анализ клиентов, которые сделали более двух бронирований в разных отелях и потратили более 500 долларов на свои бронирования. Для этого:

/* Определить клиентов, которые сделали более двух бронирований и забронировали номера в более чем одном отеле. Вывести для каждого такого клиента следующие данные: ID_customer, имя, общее количество бронирований, общее количество уникальных отелей, в которых они бронировали номера, и общую сумму, потраченную на бронирования.
Также определить клиентов, которые потратили более 500 долларов на бронирования, и вывести для них ID_customer, имя, общую сумму, потраченную на бронирования, и общее количество бронирований.
В результате объединить данные из первых двух пунктов, чтобы получить список клиентов, которые соответствуют условиям обоих запросов. Отобразить поля: ID_customer, имя, общее количество бронирований, общую сумму, потраченную на бронирования, и общее количество уникальных отелей.
Результаты отсортировать по общей сумме, потраченной клиентами, в порядке возрастания.*/

 SELECT 
    c.ID_customer,
    c.name,
    COUNT(DISTINCT b.ID_booking) AS total_bookings,  -- Количество бронирований
    SUM(DATEDIFF(b.check_out_date, b.check_in_date) * r.price) AS total_spent,  -- Общая сумма расходов
    COUNT(DISTINCT h.ID_hotel) AS distinct_hotels  -- Количество уникальных отелей
FROM 
    Customer c
JOIN 
    Booking b ON c.ID_customer = b.ID_customer
JOIN 
    Room r ON b.ID_room = r.ID_room
JOIN 
    Hotel h ON r.ID_hotel = h.ID_hotel
GROUP BY 
    c.ID_customer, c.name
HAVING 
    -- Условия фильтрации:
    COUNT(DISTINCT b.ID_booking) > 2  -- Более 2 бронирований
    AND COUNT(DISTINCT h.ID_hotel) > 1  -- В более чем 1 отеле (в задании сказано "В разных")
    AND SUM(DATEDIFF(b.check_out_date, b.check_in_date) * r.price) > 500  -- Расходы > $500
ORDER BY 
    total_spent ASC;  -- Сортировка по возрастанию суммы расходов


-- Задача 3
-- Вам необходимо провести анализ данных о бронированиях в отелях и определить предпочтения клиентов по типу отелей. Для этого выполните следующие шаги:

/* Категоризация отелей.
Определите категорию каждого отеля на основе средней стоимости номера:

«Дешевый»: средняя стоимость менее 175 долларов.
«Средний»: средняя стоимость от 175 до 300 долларов.
«Дорогой»: средняя стоимость более 300 долларов.
Анализ предпочтений клиентов.
Для каждого клиента определите предпочитаемый тип отеля на основании условия ниже:

Если у клиента есть хотя бы один «дорогой» отель, присвойте ему категорию «дорогой».
Если у клиента нет «дорогих» отелей, но есть хотя бы один «средний», присвойте ему категорию «средний».
Если у клиента нет «дорогих» и «средних» отелей, но есть «дешевые», присвойте ему категорию предпочитаемых отелей «дешевый».
Вывод информации.
Выведите для каждого клиента следующую информацию:

ID_customer: уникальный идентификатор клиента.
name: имя клиента.
preferred_hotel_type: предпочитаемый тип отеля.
visited_hotels: список уникальных отелей, которые посетил клиент.
Сортировка результатов.
Отсортируйте клиентов так, чтобы сначала шли клиенты с «дешевыми» отелями, затем со «средними» и в конце — с «дорогими». */

WITH HotelCategories AS (
    -- Классификация отелей по средней цене номера
    SELECT 
        h.ID_hotel,
        h.name AS hotel_name,
        CASE 
            WHEN AVG(r.price) < 175 THEN 'Дешевый'
            WHEN AVG(r.price) BETWEEN 175 AND 300 THEN 'Средний'
            ELSE 'Дорогой'
        END AS hotel_category
    FROM 
        Hotel h
    JOIN 
        Room r ON h.ID_hotel = r.ID_hotel
    GROUP BY 
        h.ID_hotel, h.name
),

CustomerHotels AS (
    -- Сбор информации о клиентах и посещенных ими отелях
    SELECT 
        c.ID_customer,
        c.name,
        GROUP_CONCAT(DISTINCT hc.hotel_name ORDER BY hc.hotel_name SEPARATOR ', ') AS visited_hotels,  -- Список отелей
        GROUP_CONCAT(DISTINCT hc.hotel_category) AS categories  -- Категории отелей
    FROM 
        Customer c
    JOIN 
        Booking b ON c.ID_customer = b.ID_customer
    JOIN 
        Room r ON b.ID_room = r.ID_room
    JOIN 
        HotelCategories hc ON r.ID_hotel = hc.ID_hotel
    GROUP BY 
        c.ID_customer, c.name
)

-- Определение предпочтений клиентов и финальная выборка
SELECT 
    ID_customer,
    name,
    CASE 
        WHEN categories LIKE '%Дорогой%' THEN 'Дорогой'  -- Приоритет дорогим отелям
        WHEN categories LIKE '%Средний%' THEN 'Средний'  -- Затем средним
        ELSE 'Дешевый'  -- Иначе дешевые
    END AS preferred_hotel_type,  -- Предпочитаемая категория
    visited_hotels  -- Список посещенных отелей
FROM 
    CustomerHotels
ORDER BY 
    CASE   -- Специальная сортировка по категориям
        WHEN categories LIKE '%Дорогой%' THEN 3  -- Дорогие последние
        WHEN categories LIKE '%Средний%' THEN 2  -- Средние в середине
        ELSE 1  -- Дешевые первые
    END,
    name;  -- Затем по имени
